(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3386],{9127:function(e,s,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/protocol-internals/architecture-overview",function(){return i(8267)}])},8267:function(e,s,i){"use strict";i.r(s),i.d(s,{useTOC:function(){return d}});var n=i(5893),r=i(7812),t=i(6024),a=i(9299),l=i(8757),o=i(5956),c=i(5192);function d(e){return[{value:"What you’ll learn",id:"what-youll-learn",depth:2},{value:"Architecture at a Glance",id:"architecture-at-a-glance",depth:2},{value:"Key Components",id:"key-components",depth:2},{value:"Protocol Workflow: Step-by-Step",id:"protocol-workflow-step-by-step",depth:2},{value:"Slot State Machine",id:"slot-state-machine",depth:2},{value:"Observability & Diagnostics",id:"observability--diagnostics",depth:2},{value:"Edge Cases & Robustness",id:"edge-cases--robustness",depth:2},{value:"Practical Example: Mapping Code to Architecture",id:"practical-example-mapping-code-to-architecture",depth:2},{value:"Where to Go Next",id:"where-to-go-next",depth:2}]}s.default=(0,r.c)(function(e){let{toc:s=d(e)}=e,i={a:"a",blockquote:"blockquote",code:"code",details:"details",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",summary:"summary",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:"SP8D’s protocol internals are the foundation for its lock-free, ultra-low-latency messaging. This page provides a concise, visual, and practical overview of how the protocol works under the hood, so you can confidently build, debug, or extend SP8D-powered systems."}),"\n",(0,n.jsx)(i.h1,{children:"SP8D Protocol Internals: Architecture Overview"}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsx)(i.p,{children:"SP8D delivers lock-free, ultra-low-latency, and observable messaging for demanding AI, finance, and multi-agent applications—outperforming legacy approaches like postMessage."}),"\n"]}),"\n",(0,n.jsx)(o.U,{type:"info",title:"Who is this for?",children:(0,n.jsx)(i.p,{children:"This page is for advanced users, implementers, and contributors who want to\nunderstand the inner workings of SP8D. It provides a high-level, visual, and\nnarrative-driven overview of the protocol’s architecture and data flow."})}),"\n",(0,n.jsx)(i.h2,{id:s[0].id,children:s[0].value}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"How SP8D’s protocol architecture enables lock-free, ultra-low-latency\nmessaging"}),"\n",(0,n.jsx)(i.li,{children:"The role and lifecycle of each core component"}),"\n",(0,n.jsx)(i.li,{children:"How observability and robustness are built in"}),"\n",(0,n.jsx)(i.li,{children:"Where to go for deep dives and advanced troubleshooting"}),"\n"]}),"\n",(0,n.jsx)(o.U,{type:"info",title:"When to read this",children:(0,n.jsx)(i.p,{children:"Read this after the Quickstart, before diving into protocol internals or\ndebugging edge cases."})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[1].id,children:s[1].value}),"\n",(0,n.jsx)(o.U,{type:"info",title:"Real-World Use Case",children:(0,n.jsx)(i.p,{children:"SP8D powers real-time, multi-agent communication in browser-based AI copilots,\nensuring fairness and traceability under load."})}),"\n",(0,n.jsx)(l.G,{chart:"%% Diagram: SP8D channel architecture showing Producer, Consumer, Channel, Slots, and optional Diagnostics\\n%% Accessible description: Producer sends data to Channel, Channel receives from Producer and passes to Consumer, Channel uses Slots (SharedArrayBuffer Atomics), Diagnostics can observe Channel optionally.\\ngraph TD\\n    Producer(Producer)\\n    Consumer(Consumer)\\n    Channel(SP8D Channel)\\n    Slots(Slots SharedArrayBuffer Atomics)\\n    Diagnostics(Diagnostics optional)\\n\\n    Producer -->|send| Channel\\n    Channel -->|recv| Consumer\\n    Channel --> Slots\\n    Diagnostics -.-> Channel"}),"\n",(0,n.jsx)("sub",{class:"diagram-caption",children:(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Diagram:"})," SP8D protocol architecture. See legend below for numbered\ncomponents."]})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Legend:"})}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Producer"}),": Sends data/messages into the channel"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Channel"}),": Lock-free protocol core, manages slots and state transitions"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Slot Array"}),": Shared memory buffer (SharedArrayBuffer) divided into slots"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Consumer"}),": Receives data/messages from the channel"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Diagnostics"}),": (Optional) Observes, monitors, and reports channel health"]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[2].id,children:s[2].value}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"SP8D’s architecture is built from five core components:"})}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Component"}),(0,n.jsx)(i.th,{children:"Description"}),(0,n.jsx)(i.th,{children:"Why it matters / Pitfalls"}),(0,n.jsx)(i.th,{children:"Learn more"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"Producer"})}),(0,n.jsx)(i.td,{children:"Sends data/messages into the channel"}),(0,n.jsx)(i.td,{children:"Entry point for all data; incorrect usage can cause stalls"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/quickstart/minimal-example",children:"Quickstart"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"Channel"})}),(0,n.jsx)(i.td,{children:"Lock-free protocol core, manages slots and state transitions"}),(0,n.jsx)(i.td,{children:"Ensures safety and performance; misconfiguration can cause contention"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/protocol-internals/slot-state-machine",children:"Slot State Machine"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"Slot Array"})}),(0,n.jsx)(i.td,{children:"Shared memory buffer (SharedArrayBuffer) divided into slots"}),(0,n.jsx)(i.td,{children:"Core of lock-free design; buffer sizing is critical"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/protocol-internals/gen-cycle-byte",children:"Gen-Cycle Byte"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"Consumer"})}),(0,n.jsx)(i.td,{children:"Receives data/messages from the channel"}),(0,n.jsx)(i.td,{children:"Must keep up to avoid lag/backpressure"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/principles/fairness-backpressure",children:"Fairness & Backpressure"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"Diagnostics"})}),(0,n.jsx)(i.td,{children:"Optional: observes, monitors, and reports channel health"}),(0,n.jsx)(i.td,{children:"Enables live debugging and recovery"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/guides-and-howtos/faqs",children:"Diagnostics FAQ"})})]})]})]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[3].id,children:s[3].value}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"How a message moves through SP8D:"})}),"\n",(0,n.jsx)(l.G,{chart:"sequenceDiagram\\n    participant P as Producer\\n    participant C as Channel\\n    participant S as Slot Array\\n    participant R as Consumer\\n    participant D as Diagnostics\\n    P->>C: Claim slot\\n    C->>S: Reserve slot\\n    P->>S: Write data\\n    P->>C: Mark slot ready\\n    R->>C: Detect ready slot\\n    R->>S: Read data\\n    R->>C: Mark slot reclaimed\\n    D-->>C: Observe state"}),"\n",(0,n.jsx)("sub",{class:"diagram-caption",children:(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Diagram:"})," Protocol workflow: each step from producer claim to consumer\nreclaim, with diagnostics observing state transitions."]})}),"\n",(0,n.jsx)(o.U,{type:"info",title:"Atomic Operations",children:(0,n.jsx)(i.p,{children:"Each step is managed by atomic operations to guarantee safety and performance\nunder concurrency."})}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Producer"})," claims a free slot in the shared buffer.\n",(0,n.jsx)("em",{children:"What could go wrong?"})," Buffer full, no slots available. ",(0,n.jsx)("strong",{children:"\nSP8D:\n"})," Backpressure/fairness logic prevents starvation."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Producer"})," writes data and marks the slot as ready.\n",(0,n.jsx)("em",{children:"What could go wrong?"})," Partial writes, race conditions. ",(0,n.jsx)("strong",{children:"\nSP8D:\n"})," Atomic state transitions guarantee safety."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Channel"})," manages state transitions and ensures lock-free handoff.\n",(0,n.jsx)("em",{children:"What could go wrong?"})," State corruption. ",(0,n.jsx)("strong",{children:"SP8D:"})," Protocol\nenforces valid transitions only."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Consumer"})," detects ready slot, reads data, and marks slot as reclaimed.\n",(0,n.jsx)("em",{children:"What could go wrong?"})," Consumer lag, missed messages. ",(0,n.jsx)("strong",{children:"\nSP8D:\n"})," Diagnostics and lag stats help detect issues."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Diagnostics"})," (optional) observes slot states, throughput, and errors in real time."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[4].id,children:s[4].value}),"\n",(0,n.jsxs)(i.p,{children:["For a complete deep dive into slot lifecycle, state transitions, atomic operations, and recovery—including advanced scenarios and best practices—see the ",(0,n.jsx)(i.a,{href:"/protocol-internals/slot-state-machine",children:"Slot State Machine"})," documentation."]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[5].id,children:s[5].value}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Monitor, debug, and optimize in real time:"})}),"\n",(0,n.jsx)(o.U,{type:"info",title:"Real-World Use Case",children:(0,n.jsx)(i.p,{children:"SP8D’s diagnostics enable live monitoring and recovery in high-frequency\ntrading and regulated environments."})}),"\n",(0,n.jsx)(i.p,{children:"SP8D is designed for radical observability. The diagnostics module can be attached to any channel to monitor:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Slot usage and state"}),"\n",(0,n.jsx)(i.li,{children:"Throughput (messages/sec)"}),"\n",(0,n.jsx)(i.li,{children:"Consumer lag"}),"\n",(0,n.jsx)(i.li,{children:"Errors and conflicts"}),"\n"]}),"\n",(0,n.jsx)(i.pre,{icon:c.KP,tabIndex:"0","data-language":"ts","data-word-wrap":"","data-copy":"",children:(0,n.jsxs)(i.code,{"data-line-numbers":"","data-line-numbers-max-digits":"1",children:[(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"import"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" { createChannel, createChannelDiagnostics } "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"from"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:' "@sp8d/core"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:";"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"const"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" { "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"channel"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" } "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"="}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:" createChannel"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"({ slots: "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"16"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:", slotSize: "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"64"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" });"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"const"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:" diagnostics"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:" ="}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:" createChannelDiagnostics"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"(channel, "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"100"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:");"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"diagnostics."}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"onUpdate"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"(("}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"},children:"stats"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:") "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"=>"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" {"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"  console."}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"log"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"("}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:'"SP8D Stats:"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:", stats);"})]}),"\n",(0,n.jsx)(i.span,{children:(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"});"})}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"diagnostics."}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"start"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"();"})]})]})}),"\n",(0,n.jsx)(o.U,{type:"info",title:"Why Observability Matters",children:(0,n.jsx)(i.p,{children:"Live diagnostics help you detect stuck slots, backpressure, and concurrency\nissues before they impact production."})}),"\n",(0,n.jsxs)(i.details,{children:[(0,n.jsx)(i.summary,{children:"Show sample diagnostics output"}),(0,n.jsx)(i.pre,{tabIndex:"0","data-language":"json","data-word-wrap":"",children:(0,n.jsxs)(i.code,{children:[(0,n.jsx)(i.span,{children:(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"{"})}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:'  "used"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:": "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"2"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:","})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:'  "throughput"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:": "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"1200"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:","})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:'  "consumerLag"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:": "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"0"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:","})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:'  "errors"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:": "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"0"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:","})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:'  "conflicts"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:": "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"0"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:","})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:'  "reclaimed"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:": "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"1"})]}),"\n",(0,n.jsx)(i.span,{children:(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"}"})})]})})]}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:["Use ",(0,n.jsx)(i.code,{children:"createChannelDiagnostics(channel, intervalMs)"})," to monitor any channel in real time."]}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[6].id,children:s[6].value}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"SP8D is designed for real-world reliability:"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Stuck slots:"})," Automatic sweeper and diagnostics detect and recover.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.em,{children:"How to detect:"})," Diagnostics show non-zero ",(0,n.jsx)(i.code,{children:"used"})," with no throughput."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.em,{children:"How to recover:"})," Sweeper reclaims stuck slots; manual intervention rarely\nneeded."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Reclaim races:"})," Protocol ensures only one consumer can reclaim a slot.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.em,{children:"How to detect:"})," Diagnostics may show ",(0,n.jsx)(i.code,{children:"conflicts"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.em,{children:"How to recover:"})," Protocol prevents double-reclaim; review consumer logic\nif persistent."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Full/empty buffer:"})," Backpressure and fairness mechanisms prevent starvation.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.em,{children:"How to detect:"})," Diagnostics show high ",(0,n.jsx)(i.code,{children:"used"})," or ",(0,n.jsx)(i.code,{children:"consumerLag"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.em,{children:"How to recover:"})," Tune buffer size or consumer speed; see ",(0,n.jsx)(i.a,{href:"/principles/fairness-backpressure",children:"Fairness & Backpressure"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["For implementation details, see ",(0,n.jsx)(i.code,{children:"sp8d-core.ts"})," and ",(0,n.jsx)(i.code,{children:"sp8d-diagnostics.ts"}),"."]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[7].id,children:s[7].value}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"See the protocol in action."})," Try this in your project or in the ",(0,n.jsx)(i.a,{href:"https://harness.sp8d.com",children:"SP8D live test harness"}),":"]}),"\n",(0,n.jsx)(i.pre,{icon:c.KP,tabIndex:"0","data-language":"ts","data-word-wrap":"","data-copy":"",children:(0,n.jsxs)(i.code,{"data-line-numbers":"","data-line-numbers-max-digits":"1",children:[(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"import"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" { createChannel } "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"from"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:' "@sp8d/core"'}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:";"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"const"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" { "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"channel"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" } "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"="}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:" createChannel"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"({ slots: "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"8"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:", slotSize: "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"64"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" });"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"channel."}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"send"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"("}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"new"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:" Uint8Array"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"(["}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"1"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:", "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"2"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:", "}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:"3"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"]));"})]}),"\n",(0,n.jsxs)(i.span,{children:[(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:"const"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"},children:" msg"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"},children:" ="}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:" channel."}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"recv"}),(0,n.jsx)(i.span,{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"},children:"();"})]})]})}),"\n",(0,n.jsx)(l.G,{chart:"flowchart TD\\n    A[Create channel & slot array] --> B[Producer claims slot, writes data, marks ready]\\n    B --> C[Consumer detects ready slot, reads data, reclaims slot]"}),"\n",(0,n.jsx)("sub",{class:"diagram-caption",children:(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Diagram:"})," Step-by-step: (1) Channel creation, (2) Producer action, (3)\nConsumer action."]})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:s[8].id,children:s[8].value}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/api-reference/channel-api",children:"Channel API Reference"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/quickstart/common-recipes",children:"Common Recipes"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/principles/fairness-backpressure",children:"Fairness & Backpressure"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"/guides-and-howtos/faqs",children:"FAQ & Troubleshooting"})}),"\n"]})]})},"/protocol-internals/architecture-overview",{filePath:"pages/protocol-internals/architecture-overview.mdx",timestamp:1747674895e3,pageMap:t.v,frontMatter:{title:"SP8D Protocol Internals: Architecture Overview",description:"A high-level, visual, and practical overview of the SP8D protocol architecture, data flow, and slot state machine for implementers and advanced users.",keywords:["SP8D architecture","protocol internals","lock-free messaging","slot state machine","diagnostics","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/protocol-internals/architecture-overview"},title:"SP8D Protocol Internals: Architecture Overview"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)},5956:function(e,s,i){"use strict";i.d(s,{U:function(){return o}});var n=i(5893),r=i(512),t=i(5192);let a={default:"\uD83D\uDCA1",error:"\uD83D\uDEAB",info:(0,n.jsx)(t.AV,{className:"_mt-1"}),warning:"⚠️"},l={default:(0,r.Z)("_border-orange-100 _bg-orange-50 _text-orange-800 dark:_border-orange-400/30 dark:_bg-orange-400/20 dark:_text-orange-300"),error:(0,r.Z)("_border-red-200 _bg-red-100 _text-red-900 dark:_border-red-200/30 dark:_bg-red-900/30 dark:_text-red-200"),info:(0,r.Z)("_border-blue-200 _bg-blue-100 _text-blue-900 dark:_border-blue-200/30 dark:_bg-blue-900/30 dark:_text-blue-200"),warning:(0,r.Z)("_border-yellow-100 _bg-yellow-50 _text-yellow-900 dark:_border-yellow-200/30 dark:_bg-yellow-700/30 dark:_text-yellow-200")};function o({children:e,type:s="default",emoji:i=a[s]}){return(0,n.jsxs)("div",{className:(0,r.Z)("nextra-callout _overflow-x-auto _mt-6 _flex _rounded-lg _border _py-2 ltr:_pr-4 rtl:_pl-4","contrast-more:_border-current contrast-more:dark:_border-current",l[s]),children:[(0,n.jsx)("div",{className:"_select-none _text-xl ltr:_pl-3 ltr:_pr-2 rtl:_pr-3 rtl:_pl-2",style:{fontFamily:'"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"'},children:i}),(0,n.jsx)("div",{className:"_w-full _min-w-0 _leading-7",children:e})]})}},8757:function(e,s,i){"use strict";i.d(s,{G:function(){return t}});var n=i(5893),r=i(7294);function t({chart:e}){let s=(0,r.useId)(),[t,a]=(0,r.useState)(""),l=(0,r.useRef)(null),o=function(e){let[s,i]=(0,r.useState)(!1);return(0,r.useEffect)(()=>{let s=new IntersectionObserver(([e])=>{e.isIntersecting&&(s.disconnect(),i(!0))});return s.observe(e.current),()=>{s.disconnect()}},[e]),s}(l);return(0,r.useEffect)(()=>{if(!o)return;let n=document.documentElement,r=new MutationObserver(t);return r.observe(n,{attributes:!0}),t(),()=>{r.disconnect()};async function t(){let r=n.classList.contains("dark")||n.attributes.getNamedItem("data-theme")?.value==="dark",{default:t}=await Promise.all([i.e(6925),i.e(2858)]).then(i.bind(i,2858));try{t.initialize({startOnLoad:!1,securityLevel:"loose",fontFamily:"inherit",themeCSS:"margin: 1.5rem auto 0;",theme:r?"dark":"default"});let{svg:i}=await t.render(s.replaceAll(":",""),e.replaceAll("\\n","\n"),l.current);a(i)}catch(e){console.error("Error while rendering mermaid",e)}}},[e,o]),(0,n.jsx)("div",{ref:l,dangerouslySetInnerHTML:{__html:t}})}},6024:function(e,s,i){"use strict";i.d(s,{v:function(){return n}});let n=[{data:{index:"Home",introduction:"Introduction",quickstart:"Quickstart",principles:"Principles","protocol-internals":"Protocol Internals","api-reference":"API Reference","guides-and-howtos":"Guides and How-Tos",examples:"Examples",testHarness:{title:"Test Harness",type:"page",href:"https://harness.sp8d.com",newWindow:!0},contact:{title:"Contact",type:"page",href:"mailto:admin@sp8d.com",newWindow:!0}}},{name:"api-reference",route:"/api-reference",children:[{data:{"channel-api":{title:"Channel API"}}},{name:"channel-api",route:"/api-reference/channel-api",frontMatter:{title:"SP8D Channel API Reference: Lock-Free Messaging for JavaScript & Node.js",description:"Comprehensive SP8D Channel API reference for JavaScript and Node.js. Learn methods, options, diagnostics, troubleshooting, and best practices for lock-free, real-time, high-performance messaging.",keywords:["SP8D API","channel API","JavaScript","Node.js","lock-free messaging","diagnostics","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/api-reference/channel-api"}}]},{name:"examples",route:"/examples",children:[{data:{"basic-spsc":{title:"Basic SPSC"},"scalable-mpmc":{title:"Scalable MPMC"}}},{name:"basic-spsc",route:"/examples/basic-spsc",frontMatter:{title:"SP8D SPSC Example: Single-Producer Single-Consumer in JavaScript & Node.js",description:"Step-by-step SP8D SPSC example for JavaScript and Node.js. Learn how to implement ultra-low-latency, lock-free single-producer single-consumer channels for high-performance messaging.",keywords:["SP8D example","SPSC","single-producer single-consumer","lock-free queue","JavaScript","Node.js","concurrency","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/examples/basic-spsc"}},{name:"scalable-mpmc",route:"/examples/scalable-mpmc",frontMatter:{title:"SP8D Example: Scalable MPMC (Placeholder)",description:"Placeholder for Scalable MPMC example documentation."}}]},{name:"guides-and-howtos",route:"/guides-and-howtos",children:[{data:{troubleshooting:{title:"Troubleshooting"},faqs:{title:"FAQs"}}},{name:"faqs",route:"/guides-and-howtos/faqs",frontMatter:{title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js",description:"Frequently asked questions about SP8D: browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging.",keywords:["SP8D FAQ","troubleshooting","browser support","diagnostics","backpressure","async iteration","concurrency","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/faqs"}},{name:"troubleshooting",route:"/guides-and-howtos/troubleshooting",frontMatter:{title:"SP8D Troubleshooting Guide: Buffer Full, Starvation, Diagnostics",description:"In-depth troubleshooting for SP8D: persistent buffer full, starvation, unfair access, and advanced diagnostics. Step-by-step solutions for JavaScript & Node.js.",keywords:["SP8D troubleshooting","buffer full","starvation","diagnostics","fairness","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/troubleshooting"}}]},{name:"index",route:"/",frontMatter:{title:"SP8D: Ultra-Low-Latency Lock-Free Channels for JavaScript & Node.js",description:"Discover SP8D, the fastest lock-free, observable protocol for real-time, cross-thread communication in JavaScript and Node.js. Learn features, use cases, and how to get started with high-performance messaging.",keywords:["SP8D","lock-free channels","real-time messaging","AI concurrency","browser communication","SharedArrayBuffer","Atomics","multi-agent","diagnostics","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/"}},{name:"introduction",route:"/introduction",children:[{data:{"what-is-sp8d":{title:"What is SP8D"}}},{name:"what-is-sp8d",route:"/introduction/what-is-sp8d",frontMatter:{title:"What is SP8D? Lock-Free Real-Time Messaging for JavaScript & Node.js",description:"Learn what makes SP8D the best lock-free, high-performance protocol for real-time, observable data transfer in JavaScript and Node.js. Ideal for AI, finance, and multi-agent apps.",keywords:["SP8D","what is SP8D","lock-free protocol","real-time data","browser concurrency","AI messaging","Node.js","SharedArrayBuffer","diagnostics","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/introduction/what-is-sp8d"}}]},{name:"principles",route:"/principles",children:[{data:{"concurrency-models":{title:"Concurrency Models"},"fairness-backpressure":{title:"Fairness Backpressure"}}},{name:"concurrency-models",route:"/principles/concurrency-models",frontMatter:{title:"SP8D Concurrency Models: SPSC, MPSC, MPMC Explained for JavaScript & Node.js",description:"Master SP8D concurrency models—SPSC, MPSC, and MPMC—for high-performance, lock-free communication in JavaScript and Node.js. Compare patterns, use cases, and implementation tips to optimize your multi-threaded apps.",keywords:["SP8D concurrency","SPSC","MPSC","MPMC","concurrency models","lock-free","multi-threading","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/principles/concurrency-models"}},{name:"fairness-backpressure",route:"/principles/fairness-backpressure",frontMatter:{title:"SP8D Principles: Fairness & Backpressure",description:"Understand fairness and backpressure in SP8D: how the protocol ensures robust, lock-free messaging, prevents starvation, and handles full/empty buffers. Best practices, diagrams, and troubleshooting for JavaScript & Node.js.",keywords:["SP8D fairness","backpressure","lock-free messaging","starvation prevention","buffer full","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/principles/fairness-backpressure"}}]},{name:"protocol-internals",route:"/protocol-internals",children:[{data:{"architecture-overview":{title:"Architecture Overview"},"slot-state-machine":{title:"Slot State Machine"},"gen-cycle-byte":{title:"Gen Cycle Byte"}}},{name:"architecture-overview",route:"/protocol-internals/architecture-overview",frontMatter:{title:"SP8D Protocol Internals: Architecture Overview",description:"A high-level, visual, and practical overview of the SP8D protocol architecture, data flow, and slot state machine for implementers and advanced users.",keywords:["SP8D architecture","protocol internals","lock-free messaging","slot state machine","diagnostics","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/protocol-internals/architecture-overview"}},{name:"gen-cycle-byte",route:"/protocol-internals/gen-cycle-byte",frontMatter:{title:"SP8D Protocol Internals: Gen-Cycle Byte (Placeholder)",description:"Placeholder for Gen-Cycle Byte documentation."}},{name:"slot-state-machine",route:"/protocol-internals/slot-state-machine",frontMatter:{title:"SP8D Protocol Internals: Slot State Machine",description:"Deep dive into the SP8D slot state machine: lifecycle, transitions, fairness, and recovery. Visual diagrams and best practices for implementers and advanced users."}}]},{name:"quickstart",route:"/quickstart",children:[{data:{installation:{title:"Installation"},"minimal-example":{title:"Minimal Example"},"common-recipes":{title:"Common Recipes"}}},{name:"common-recipes",route:"/quickstart/common-recipes",frontMatter:{title:"SP8D Recipes: Integration Patterns for JavaScript & Node.js",description:"Common SP8D integration patterns and recipes for JavaScript and Node.js. Learn browser, Node.js, and AI/ML workflows with code samples and diagrams for high-performance messaging.",keywords:["SP8D recipes","integration patterns","JavaScript","Node.js","AI messaging","browser workers","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/common-recipes"}},{name:"installation",route:"/quickstart/installation",frontMatter:{title:"Install SP8D: Quickstart Guide for JavaScript & Node.js",description:"How to install SP8D for ultra-fast, lock-free cross-thread communication in JavaScript and Node.js. Step-by-step requirements, setup, and troubleshooting for high-performance messaging.",keywords:["SP8D installation","quickstart","JavaScript","Node.js","SharedArrayBuffer","Atomics","setup guide","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/installation"}},{name:"minimal-example",route:"/quickstart/minimal-example",frontMatter:{title:"SP8D Minimal Example: Lock-Free Messaging in JavaScript & Node.js",description:"Minimal working SP8D example for real-time, lock-free messaging in JavaScript and Node.js. Copy-paste code for instant high-performance results.",keywords:["SP8D minimal example","quickstart","JavaScript","Node.js","lock-free messaging","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/minimal-example"}}]}]}},function(e){e.O(0,[7812,2888,9774,179],function(){return e(e.s=9127)}),_N_E=e.O()}]);