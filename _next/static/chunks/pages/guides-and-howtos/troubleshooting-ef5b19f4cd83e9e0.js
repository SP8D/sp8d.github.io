(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1568],{5857:function(e,r,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides-and-howtos/troubleshooting",function(){return t(2918)}])},2918:function(e,r,t){"use strict";t.r(r),t.d(r,{useTOC:function(){return c}});var n=t(5893),i=t(7812),a=t(6024),s=t(9299),o=t(5956);function c(e){return[{value:"Troubleshooting Scenarios",id:"troubleshooting-scenarios",depth:2},{value:"Persistent Buffer Full",id:"persistent-buffer-full",depth:3},{value:"Starvation or Unfair Access",id:"starvation-or-unfair-access",depth:3},{value:"Advanced Diagnostics & Mythbusting",id:"advanced-diagnostics--mythbusting",depth:2},{value:"Where to Go Next",id:"where-to-go-next",depth:2}]}r.default=(0,i.c)(function(e){let{toc:r=c(e)}=e,t={a:"a",br:"br",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{children:"SP8D Troubleshooting Guide"}),"\n",(0,n.jsx)(o.U,{type:"info",title:"How to Use This Guide",children:(0,n.jsx)(t.p,{children:"This guide covers persistent buffer full, starvation, unfair access, and\nadvanced diagnostics for SP8D channels. Use the scenarios below to quickly\ndiagnose and resolve common issues."})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:r[0].id,children:r[0].value}),"\n",(0,n.jsx)(t.h3,{id:r[1].id,children:r[1].value}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Check if your consumer is too slow or your buffer is too small."}),"\n",(0,n.jsx)(t.li,{children:"Use diagnostics to identify bottlenecks."}),"\n",(0,n.jsx)(t.li,{children:"Try increasing buffer size or optimizing consumer logic."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:r[2].id,children:r[2].value}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Use diagnostics to check for agents that are not making progress."}),"\n",(0,n.jsx)(t.li,{children:"Review your concurrency pattern—consider switching to SPSC or MPSC if possible."}),"\n",(0,n.jsx)(t.li,{children:"Tune buffer size and retry logic."}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:r[3].id,children:r[3].value}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Myth:"})," “Backpressure means data loss.”",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.em,{children:"Fact:"})," SP8D never drops data silently; you always get a signal and can handle it."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Myth:"})," “Fairness is automatic in all lock-free systems.”",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.em,{children:"Fact:"})," Only protocols with explicit fairness mechanisms (like SP8D’s slot state machine) can guarantee it."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Myth:"})," “Backpressure only happens in slow systems.”",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.em,{children:"Fact:"})," Backpressure can occur even in high-performance systems during bursts or imbalanced workloads."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Myth:"})," “Diagnostics are only for debugging.”",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.em,{children:"Fact:"})," Diagnostics are essential for proactive monitoring and tuning in production."]}),"\n"]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:r[4].id,children:r[4].value}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/quickstart/common-recipes",children:"Common Recipes"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/api-reference/channel-api",children:"Channel API Reference"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/protocol-internals/architecture-overview",children:"Protocol Architecture Overview"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/principles/fairness-backpressure",children:"Fairness & Backpressure"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/guides-and-howtos/faqs",children:"FAQ & Troubleshooting"})}),"\n"]})]})},"/guides-and-howtos/troubleshooting",{filePath:"pages/guides-and-howtos/troubleshooting.mdx",timestamp:1747570399e3,pageMap:a.v,frontMatter:{title:"SP8D Troubleshooting Guide: Buffer Full, Starvation, Diagnostics",description:"In-depth troubleshooting for SP8D: persistent buffer full, starvation, unfair access, and advanced diagnostics. Step-by-step solutions for JavaScript & Node.js.",keywords:["SP8D troubleshooting","buffer full","starvation","diagnostics","fairness","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/troubleshooting"},title:"SP8D Troubleshooting Guide: Buffer Full, Starvation, Diagnostics"},"undefined"==typeof RemoteContent?c:RemoteContent.useTOC)},5956:function(e,r,t){"use strict";t.d(r,{U:function(){return c}});var n=t(5893),i=t(512),a=t(5192);let s={default:"\uD83D\uDCA1",error:"\uD83D\uDEAB",info:(0,n.jsx)(a.AV,{className:"_mt-1"}),warning:"⚠️"},o={default:(0,i.Z)("_border-orange-100 _bg-orange-50 _text-orange-800 dark:_border-orange-400/30 dark:_bg-orange-400/20 dark:_text-orange-300"),error:(0,i.Z)("_border-red-200 _bg-red-100 _text-red-900 dark:_border-red-200/30 dark:_bg-red-900/30 dark:_text-red-200"),info:(0,i.Z)("_border-blue-200 _bg-blue-100 _text-blue-900 dark:_border-blue-200/30 dark:_bg-blue-900/30 dark:_text-blue-200"),warning:(0,i.Z)("_border-yellow-100 _bg-yellow-50 _text-yellow-900 dark:_border-yellow-200/30 dark:_bg-yellow-700/30 dark:_text-yellow-200")};function c({children:e,type:r="default",emoji:t=s[r]}){return(0,n.jsxs)("div",{className:(0,i.Z)("nextra-callout _overflow-x-auto _mt-6 _flex _rounded-lg _border _py-2 ltr:_pr-4 rtl:_pl-4","contrast-more:_border-current contrast-more:dark:_border-current",o[r]),children:[(0,n.jsx)("div",{className:"_select-none _text-xl ltr:_pl-3 ltr:_pr-2 rtl:_pr-3 rtl:_pl-2",style:{fontFamily:'"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"'},children:t}),(0,n.jsx)("div",{className:"_w-full _min-w-0 _leading-7",children:e})]})}},6024:function(e,r,t){"use strict";t.d(r,{v:function(){return n}});let n=[{data:{index:"Home",introduction:"Introduction",quickstart:"Quickstart",principles:"Principles","protocol-internals":"Protocol Internals","api-reference":"API Reference","guides-and-howtos":"Guides and How-Tos",examples:"Examples",testHarness:{title:"Test Harness",type:"page",href:"https://harness.sp8d.com",newWindow:!0},contact:{title:"Contact",type:"page",href:"mailto:admin@sp8d.com",newWindow:!0}}},{name:"api-reference",route:"/api-reference",children:[{data:{"channel-api":{title:"Channel API"}}},{name:"channel-api",route:"/api-reference/channel-api",frontMatter:{title:"SP8D Channel API Reference: Lock-Free Messaging for JavaScript & Node.js",description:"Comprehensive SP8D Channel API reference for JavaScript and Node.js. Learn methods, options, diagnostics, troubleshooting, and best practices for lock-free, real-time, high-performance messaging.",keywords:["SP8D API","channel API","JavaScript","Node.js","lock-free messaging","diagnostics","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/api-reference/channel-api"}}]},{name:"examples",route:"/examples",children:[{data:{"basic-spsc":{title:"Basic SPSC"},"scalable-mpmc":{title:"Scalable MPMC"}}},{name:"basic-spsc",route:"/examples/basic-spsc",frontMatter:{title:"SP8D SPSC Example: Single-Producer Single-Consumer in JavaScript & Node.js",description:"Step-by-step SP8D SPSC example for JavaScript and Node.js. Learn how to implement ultra-low-latency, lock-free single-producer single-consumer channels for high-performance messaging.",keywords:["SP8D example","SPSC","single-producer single-consumer","lock-free queue","JavaScript","Node.js","concurrency","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/examples/basic-spsc"}},{name:"scalable-mpmc",route:"/examples/scalable-mpmc",frontMatter:{title:"SP8D Example: Scalable MPMC (Placeholder)",description:"Placeholder for Scalable MPMC example documentation."}}]},{name:"guides-and-howtos",route:"/guides-and-howtos",children:[{data:{troubleshooting:{title:"Troubleshooting"},faqs:{title:"FAQs"}}},{name:"faqs",route:"/guides-and-howtos/faqs",frontMatter:{title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js",description:"Frequently asked questions about SP8D: browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging.",keywords:["SP8D FAQ","troubleshooting","browser support","diagnostics","backpressure","async iteration","concurrency","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/faqs"}},{name:"troubleshooting",route:"/guides-and-howtos/troubleshooting",frontMatter:{title:"SP8D Troubleshooting Guide: Buffer Full, Starvation, Diagnostics",description:"In-depth troubleshooting for SP8D: persistent buffer full, starvation, unfair access, and advanced diagnostics. Step-by-step solutions for JavaScript & Node.js.",keywords:["SP8D troubleshooting","buffer full","starvation","diagnostics","fairness","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/troubleshooting"}}]},{name:"index",route:"/",frontMatter:{title:"SP8D: Ultra-Low-Latency Lock-Free Channels for JavaScript & Node.js",description:"Discover SP8D, the fastest lock-free, observable protocol for real-time, cross-thread communication in JavaScript and Node.js. Learn features, use cases, and how to get started with high-performance messaging.",keywords:["SP8D","lock-free channels","real-time messaging","AI concurrency","browser communication","SharedArrayBuffer","Atomics","multi-agent","diagnostics","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/"}},{name:"introduction",route:"/introduction",children:[{data:{"what-is-sp8d":{title:"What is SP8D"}}},{name:"what-is-sp8d",route:"/introduction/what-is-sp8d",frontMatter:{title:"What is SP8D? Lock-Free Real-Time Messaging for JavaScript & Node.js",description:"Learn what makes SP8D the best lock-free, high-performance protocol for real-time, observable data transfer in JavaScript and Node.js. Ideal for AI, finance, and multi-agent apps.",keywords:["SP8D","what is SP8D","lock-free protocol","real-time data","browser concurrency","AI messaging","Node.js","SharedArrayBuffer","diagnostics","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/introduction/what-is-sp8d"}}]},{name:"principles",route:"/principles",children:[{data:{"concurrency-models":{title:"Concurrency Models"},"fairness-backpressure":{title:"Fairness Backpressure"}}},{name:"concurrency-models",route:"/principles/concurrency-models",frontMatter:{title:"SP8D Concurrency Models: SPSC, MPSC, MPMC Explained for JavaScript & Node.js",description:"Master SP8D concurrency models—SPSC, MPSC, and MPMC—for high-performance, lock-free communication in JavaScript and Node.js. Compare patterns, use cases, and implementation tips to optimize your multi-threaded apps.",keywords:["SP8D concurrency","SPSC","MPSC","MPMC","concurrency models","lock-free","multi-threading","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/principles/concurrency-models"}},{name:"fairness-backpressure",route:"/principles/fairness-backpressure",frontMatter:{title:"SP8D Principles: Fairness & Backpressure",description:"Understand fairness and backpressure in SP8D: how the protocol ensures robust, lock-free messaging, prevents starvation, and handles full/empty buffers. Best practices, diagrams, and troubleshooting for JavaScript & Node.js.",keywords:["SP8D fairness","backpressure","lock-free messaging","starvation prevention","buffer full","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/principles/fairness-backpressure"}}]},{name:"protocol-internals",route:"/protocol-internals",children:[{data:{"architecture-overview":{title:"Architecture Overview"},"slot-state-machine":{title:"Slot State Machine"},"gen-cycle-byte":{title:"Gen Cycle Byte"}}},{name:"architecture-overview",route:"/protocol-internals/architecture-overview",frontMatter:{title:"SP8D Protocol Internals: Architecture Overview",description:"A high-level, visual, and practical overview of the SP8D protocol architecture, data flow, and slot state machine for implementers and advanced users.",keywords:["SP8D architecture","protocol internals","lock-free messaging","slot state machine","diagnostics","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/protocol-internals/architecture-overview"}},{name:"gen-cycle-byte",route:"/protocol-internals/gen-cycle-byte",frontMatter:{title:"SP8D Protocol Internals: Gen-Cycle Byte (Placeholder)",description:"Placeholder for Gen-Cycle Byte documentation."}},{name:"slot-state-machine",route:"/protocol-internals/slot-state-machine",frontMatter:{title:"SP8D Protocol Internals: Slot State Machine (Placeholder)",description:"Placeholder for Slot State Machine documentation."}}]},{name:"quickstart",route:"/quickstart",children:[{data:{installation:{title:"Installation"},"minimal-example":{title:"Minimal Example"},"common-recipes":{title:"Common Recipes"}}},{name:"common-recipes",route:"/quickstart/common-recipes",frontMatter:{title:"SP8D Recipes: Integration Patterns for JavaScript & Node.js",description:"Common SP8D integration patterns and recipes for JavaScript and Node.js. Learn browser, Node.js, and AI/ML workflows with code samples and diagrams for high-performance messaging.",keywords:["SP8D recipes","integration patterns","JavaScript","Node.js","AI messaging","browser workers","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/common-recipes"}},{name:"installation",route:"/quickstart/installation",frontMatter:{title:"Install SP8D: Quickstart Guide for JavaScript & Node.js",description:"How to install SP8D for ultra-fast, lock-free cross-thread communication in JavaScript and Node.js. Step-by-step requirements, setup, and troubleshooting for high-performance messaging.",keywords:["SP8D installation","quickstart","JavaScript","Node.js","SharedArrayBuffer","Atomics","setup guide","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/installation"}},{name:"minimal-example",route:"/quickstart/minimal-example",frontMatter:{title:"SP8D Minimal Example: Lock-Free Messaging in JavaScript & Node.js",description:"Minimal working SP8D example for real-time, lock-free messaging in JavaScript and Node.js. Copy-paste code for instant high-performance results.",keywords:["SP8D minimal example","quickstart","JavaScript","Node.js","lock-free messaging","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/minimal-example"}}]}]}},function(e){e.O(0,[7812,2888,9774,179],function(){return e(e.s=5857)}),_N_E=e.O()}]);