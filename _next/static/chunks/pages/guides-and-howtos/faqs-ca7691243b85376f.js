(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9430],{6576:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides-and-howtos/faqs",function(){return n(4010)}])},4010:function(e,r,n){"use strict";n.r(r),n.d(r,{useTOC:function(){return o}});var s=n(5893),t=n(7812),a=n(1937),i=n(9299);function o(e){return[{value:"SharedArrayBuffer & Browser Support",id:"sharedarraybuffer--browser-support",depth:2},{value:"Diagnostics & Live Monitoring",id:"diagnostics--live-monitoring",depth:2},{value:"Backpressure & Buffer Full",id:"backpressure--buffer-full",depth:2},{value:"Protocol Errors & Debugging",id:"protocol-errors--debugging",depth:2},{value:"Async Iteration & Patterns",id:"async-iteration--patterns",depth:2},{value:"Broadcasting & MPMC",id:"broadcasting--mpmc",depth:2},{value:"General",id:"general",depth:2}]}r.default=(0,t.c)(function(e){let{toc:r=o(e)}=e,n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Find answers to common SP8D questions about browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging."}),"\n",(0,s.jsx)(n.h1,{children:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js"}),"\n","\n",(0,s.jsx)(n.h1,{children:"Frequently Asked Questions"}),"\n",(0,s.jsx)(n.h2,{id:r[0].id,children:r[0].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," Why do I get “Cannot use SharedArrayBuffer” or see errors about browser support?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Your browser or environment may lack SharedArrayBuffer/Atomics support, or you may need special headers (COOP/COEP). See installation requirements."]}),"\n",(0,s.jsx)(n.h2,{id:r[1].id,children:r[1].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," How do I use diagnostics or monitor channel health?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Use ",(0,s.jsx)(n.code,{children:"createChannelDiagnostics"})," for live stats and monitoring. See the API reference for details."]}),"\n",(0,s.jsx)(n.h2,{id:r[2].id,children:r[2].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," What should I do if the channel is full or backpressured?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Use ",(0,s.jsx)(n.code,{children:"sendAsync()"})," or handle retries. See code examples for patterns."]}),"\n",(0,s.jsx)(n.h2,{id:r[3].id,children:r[3].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," What do protocol errors or slot conflicts mean?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," They usually indicate concurrency mode mismatch or incorrect usage. Double-check your channel setup."]}),"\n",(0,s.jsx)(n.h2,{id:r[4].id,children:r[4].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," Can I use async iteration with channels?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Yes, channels support async iteration for event-driven consumption."]}),"\n",(0,s.jsx)(n.h2,{id:r[5].id,children:r[5].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," How do I broadcast or use MPMC patterns?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Use MPMC mode for multi-producer/multi-consumer. See concurrency models for details."]}),"\n",(0,s.jsx)(n.h2,{id:r[6].id,children:r[6].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q:"})," Still stuck or have another question?",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Open an issue or check the docs for more details."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last updated: 14 May 2025"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Next: ",(0,s.jsx)(n.a,{href:"https://github.com/SP8D/sp8d/issues",children:"Open an issue or contribute on GitHub →"})]})})]})},"/guides-and-howtos/faqs",{filePath:"pages/guides-and-howtos/faqs.mdx",timestamp:1747203403e3,pageMap:a.v,frontMatter:{title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js",description:"Frequently asked questions about SP8D: browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging.",keywords:["SP8D FAQ","troubleshooting","browser support","diagnostics","backpressure","async iteration","concurrency","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/faqs"},title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js"},"undefined"==typeof RemoteContent?o:RemoteContent.useTOC)},1937:function(e,r,n){"use strict";n.d(r,{v:function(){return s}});let s=[{data:{index:"Home",introduction:"Introduction",quickstart:"Quickstart",principles:"Principles","api-reference":"API Reference","guides-and-howtos":"Guides and How-Tos",examples:"Examples",testHarness:{title:"Test Harness",type:"page",href:"https://harness.sp8d.com",newWindow:!0},contact:{title:"Contact",type:"page",href:"mailto:admin@sp8d.com",newWindow:!0}}},{name:"api-reference",route:"/api-reference",children:[{data:{"channel-api":{title:"Channel API"}}},{name:"channel-api",route:"/api-reference/channel-api",frontMatter:{title:"SP8D Channel API Reference: Lock-Free Messaging for JavaScript & Node.js",description:"Comprehensive SP8D Channel API reference for JavaScript and Node.js. Learn methods, options, diagnostics, troubleshooting, and best practices for lock-free, real-time, high-performance messaging.",keywords:["SP8D API","channel API","JavaScript","Node.js","lock-free messaging","diagnostics","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/api-reference/channel-api"}}]},{name:"examples",route:"/examples",children:[{data:{"basic-spsc":{title:"Basic SPSC"}}},{name:"basic-spsc",route:"/examples/basic-spsc",frontMatter:{title:"SP8D SPSC Example: Single-Producer Single-Consumer in JavaScript & Node.js",description:"Step-by-step SP8D SPSC example for JavaScript and Node.js. Learn how to implement ultra-low-latency, lock-free single-producer single-consumer channels for high-performance messaging.",keywords:["SP8D example","SPSC","single-producer single-consumer","lock-free queue","JavaScript","Node.js","concurrency","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/examples/basic-spsc"}}]},{name:"guides-and-howtos",route:"/guides-and-howtos",children:[{data:{faqs:{title:"FAQs"}}},{name:"faqs",route:"/guides-and-howtos/faqs",frontMatter:{title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js",description:"Frequently asked questions about SP8D: browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging.",keywords:["SP8D FAQ","troubleshooting","browser support","diagnostics","backpressure","async iteration","concurrency","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/faqs"}}]},{name:"index",route:"/",frontMatter:{title:"SP8D: Ultra-Low-Latency Lock-Free Channels for JavaScript & Node.js",description:"Discover SP8D, the fastest lock-free, observable protocol for real-time, cross-thread communication in JavaScript and Node.js. Learn features, use cases, and how to get started with high-performance messaging.",keywords:["SP8D","lock-free channels","real-time messaging","AI concurrency","browser communication","SharedArrayBuffer","Atomics","multi-agent","diagnostics","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/"}},{name:"introduction",route:"/introduction",children:[{data:{"what-is-sp8d":{title:"What is SP8D"}}},{name:"what-is-sp8d",route:"/introduction/what-is-sp8d",frontMatter:{title:"What is SP8D? Lock-Free Real-Time Messaging for JavaScript & Node.js",description:"Learn what makes SP8D the best lock-free, high-performance protocol for real-time, observable data transfer in JavaScript and Node.js. Ideal for AI, finance, and multi-agent apps.",keywords:["SP8D","what is SP8D","lock-free protocol","real-time data","browser concurrency","AI messaging","Node.js","SharedArrayBuffer","diagnostics","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/introduction/what-is-sp8d"}}]},{name:"principles",route:"/principles",children:[{data:{"concurrency-models":{title:"Concurrency Models"}}},{name:"concurrency-models",route:"/principles/concurrency-models",frontMatter:{title:"SP8D Concurrency Models: SPSC, MPSC, MPMC Explained for JavaScript & Node.js",description:"Master SP8D concurrency models—SPSC, MPSC, and MPMC—for high-performance, lock-free communication in JavaScript and Node.js. Compare patterns, use cases, and implementation tips to optimize your multi-threaded apps.",keywords:["SP8D concurrency","SPSC","MPSC","MPMC","concurrency models","lock-free","multi-threading","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/principles/concurrency-models"}}]},{name:"quickstart",route:"/quickstart",children:[{data:{installation:{title:"Installation"},"minimal-example":{title:"Minimal Example"},"common-recipes":{title:"Common Recipes"}}},{name:"common-recipes",route:"/quickstart/common-recipes",frontMatter:{title:"SP8D Recipes: Integration Patterns for JavaScript & Node.js",description:"Common SP8D integration patterns and recipes for JavaScript and Node.js. Learn browser, Node.js, and AI/ML workflows with code samples and diagrams for high-performance messaging.",keywords:["SP8D recipes","integration patterns","JavaScript","Node.js","AI messaging","browser workers","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/common-recipes"}},{name:"installation",route:"/quickstart/installation",frontMatter:{title:"Install SP8D: Quickstart Guide for JavaScript & Node.js",description:"How to install SP8D for ultra-fast, lock-free cross-thread communication in JavaScript and Node.js. Step-by-step requirements, setup, and troubleshooting for high-performance messaging.",keywords:["SP8D installation","quickstart","JavaScript","Node.js","SharedArrayBuffer","Atomics","setup guide","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/installation"}},{name:"minimal-example",route:"/quickstart/minimal-example",frontMatter:{title:"SP8D Minimal Example: Lock-Free Messaging in JavaScript & Node.js",description:"Minimal working SP8D example for real-time, lock-free messaging in JavaScript and Node.js. Copy-paste code for instant high-performance results.",keywords:["SP8D minimal example","quickstart","JavaScript","Node.js","lock-free messaging","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/minimal-example"}}]}]}},function(e){e.O(0,[7812,2888,9774,179],function(){return e(e.s=6576)}),_N_E=e.O()}]);