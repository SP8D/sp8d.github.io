(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9430],{6576:function(e,r,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides-and-howtos/faqs",function(){return t(4010)}])},4010:function(e,r,t){"use strict";t.r(r),t.d(r,{useTOC:function(){return i}});var n=t(5893),s=t(7812),a=t(6024),o=t(9299);function i(e){return[{value:"SharedArrayBuffer & Browser Support",id:"sharedarraybuffer--browser-support",depth:2},{value:"Diagnostics & Live Monitoring",id:"diagnostics--live-monitoring",depth:2},{value:"Backpressure & Buffer Full",id:"backpressure--buffer-full",depth:2},{value:"Protocol Errors & Debugging",id:"protocol-errors--debugging",depth:2},{value:"Async Iteration & Patterns",id:"async-iteration--patterns",depth:2},{value:"Broadcasting & MPMC",id:"broadcasting--mpmc",depth:2},{value:"What is the ABA Problem?",id:"what-is-the-aba-problem",depth:2},{value:"Slot State Machine & Protocol Internals",id:"slot-state-machine--protocol-internals",depth:2},{value:"General",id:"general",depth:2}]}r.default=(0,s.c)(function(e){let{toc:r=i(e)}=e,t={a:"a",br:"br",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Find answers to common SP8D questions about browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging."}),"\n",(0,n.jsx)(t.h1,{children:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js"}),"\n","\n",(0,n.jsx)(t.h1,{children:"Frequently Asked Questions"}),"\n",(0,n.jsx)(t.h2,{id:r[0].id,children:r[0].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," Why do I get “Cannot use SharedArrayBuffer” or see errors about browser support?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," Your browser or environment may lack SharedArrayBuffer/Atomics support, or you may need special headers (COOP/COEP). See installation requirements."]}),"\n",(0,n.jsx)(t.h2,{id:r[1].id,children:r[1].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," How do I use diagnostics or monitor channel health?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," See the ",(0,n.jsx)(t.a,{href:"/protocol-internals/architecture-overview#observability--diagnostics",children:"Protocol Internals: Architecture Overview"})," for the canonical explanation of diagnostics, observability, and live monitoring in SP8D. For API usage, see the ",(0,n.jsx)(t.a,{href:"/api-reference/channel-api",children:"Channel API Reference"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:r[2].id,children:r[2].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," What should I do if the channel is full or backpressured?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," See ",(0,n.jsx)(t.a,{href:"/principles/fairness-backpressure",children:"Fairness & Backpressure"})," for the canonical, in-depth guide to backpressure, fairness, and buffer full handling in SP8D. This is the best resource for understanding and resolving these issues."]}),"\n",(0,n.jsx)(t.h2,{id:r[3].id,children:r[3].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," What do protocol errors or slot conflicts mean?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," See the ",(0,n.jsx)(t.a,{href:"/protocol-internals/architecture-overview#edge-cases--robustness",children:"Protocol Internals: Architecture Overview"})," for protocol error handling, slot conflicts, and recovery mechanisms."]}),"\n",(0,n.jsx)(t.h2,{id:r[4].id,children:r[4].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," Can I use async iteration with channels?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," Yes, channels support async iteration for event-driven consumption."]}),"\n",(0,n.jsx)(t.h2,{id:r[5].id,children:r[5].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," How do I broadcast or use MPMC patterns?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," Use MPMC mode for multi-producer/multi-consumer. See concurrency models for details."]}),"\n",(0,n.jsx)(t.h2,{id:r[6].id,children:r[6].value}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.strong,{children:"ABA problem"})," is a classic bug in lock-free programming. It occurs when a memory location is changed from value A to B and back to A between two checks, making it appear unchanged to a thread using compare-and-swap (CAS). This can lead to subtle, hard-to-detect errors."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"How does SP8D prevent ABA?"})}),"\n",(0,n.jsxs)(t.p,{children:["SP8D uses a ",(0,n.jsx)(t.strong,{children:"generation (cycle) tag"})," for each slot. This tag increments every time a slot is reclaimed or wraps around, so even if the slot’s status returns to its original value, the generation tag will be different. This ensures that CAS operations are always safe and reliable."]}),"\n",(0,n.jsx)(t.h2,{id:r[7].id,children:r[7].value}),"\n",(0,n.jsxs)(t.p,{children:["For a complete explanation of the slot state machine—including slot lifecycle, state transitions, atomic operations, fairness, and recovery—see the ",(0,n.jsx)(t.a,{href:"/protocol-internals/slot-state-machine",children:"Slot State Machine"})," documentation."]}),"\n",(0,n.jsx)(t.h2,{id:r[8].id,children:r[8].value}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Q:"})," Still stuck or have another question?",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.strong,{children:"A:"})," Open an issue or check the docs for more details."]})]})},"/guides-and-howtos/faqs",{filePath:"pages/guides-and-howtos/faqs.mdx",timestamp:1747674895e3,pageMap:a.v,frontMatter:{title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js",description:"Frequently asked questions about SP8D: browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging.",keywords:["SP8D FAQ","troubleshooting","browser support","diagnostics","backpressure","async iteration","concurrency","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/faqs"},title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js"},"undefined"==typeof RemoteContent?i:RemoteContent.useTOC)},6024:function(e,r,t){"use strict";t.d(r,{v:function(){return n}});let n=[{data:{index:"Home",introduction:"Introduction",quickstart:"Quickstart",principles:"Principles","protocol-internals":"Protocol Internals","api-reference":"API Reference","guides-and-howtos":"Guides and How-Tos",examples:"Examples",testHarness:{title:"Test Harness",type:"page",href:"https://harness.sp8d.com",newWindow:!0},contact:{title:"Contact",type:"page",href:"mailto:admin@sp8d.com",newWindow:!0}}},{name:"api-reference",route:"/api-reference",children:[{data:{"channel-api":{title:"Channel API"}}},{name:"channel-api",route:"/api-reference/channel-api",frontMatter:{title:"SP8D Channel API Reference: Lock-Free Messaging for JavaScript & Node.js",description:"Comprehensive SP8D Channel API reference for JavaScript and Node.js. Learn methods, options, diagnostics, troubleshooting, and best practices for lock-free, real-time, high-performance messaging.",keywords:["SP8D API","channel API","JavaScript","Node.js","lock-free messaging","diagnostics","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/api-reference/channel-api"}}]},{name:"examples",route:"/examples",children:[{data:{"basic-spsc":{title:"Basic SPSC"},"scalable-mpmc":{title:"Scalable MPMC"}}},{name:"basic-spsc",route:"/examples/basic-spsc",frontMatter:{title:"SP8D SPSC Example: Single-Producer Single-Consumer in JavaScript & Node.js",description:"Step-by-step SP8D SPSC example for JavaScript and Node.js. Learn how to implement ultra-low-latency, lock-free single-producer single-consumer channels for high-performance messaging.",keywords:["SP8D example","SPSC","single-producer single-consumer","lock-free queue","JavaScript","Node.js","concurrency","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/examples/basic-spsc"}},{name:"scalable-mpmc",route:"/examples/scalable-mpmc",frontMatter:{title:"SP8D Example: Scalable MPMC (Placeholder)",description:"Placeholder for Scalable MPMC example documentation."}}]},{name:"guides-and-howtos",route:"/guides-and-howtos",children:[{data:{troubleshooting:{title:"Troubleshooting"},faqs:{title:"FAQs"}}},{name:"faqs",route:"/guides-and-howtos/faqs",frontMatter:{title:"SP8D FAQ: Troubleshooting, Diagnostics & Concurrency in JavaScript & Node.js",description:"Frequently asked questions about SP8D: browser support, diagnostics, backpressure, async iteration, and troubleshooting for high-performance JavaScript and Node.js messaging.",keywords:["SP8D FAQ","troubleshooting","browser support","diagnostics","backpressure","async iteration","concurrency","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/faqs"}},{name:"troubleshooting",route:"/guides-and-howtos/troubleshooting",frontMatter:{title:"SP8D Troubleshooting Guide: Buffer Full, Starvation, Diagnostics",description:"In-depth troubleshooting for SP8D: persistent buffer full, starvation, unfair access, and advanced diagnostics. Step-by-step solutions for JavaScript & Node.js.",keywords:["SP8D troubleshooting","buffer full","starvation","diagnostics","fairness","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/guides-and-howtos/troubleshooting"}}]},{name:"index",route:"/",frontMatter:{title:"SP8D: Ultra-Low-Latency Lock-Free Channels for JavaScript & Node.js",description:"Discover SP8D, the fastest lock-free, observable protocol for real-time, cross-thread communication in JavaScript and Node.js. Learn features, use cases, and how to get started with high-performance messaging.",keywords:["SP8D","lock-free channels","real-time messaging","AI concurrency","browser communication","SharedArrayBuffer","Atomics","multi-agent","diagnostics","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/"}},{name:"introduction",route:"/introduction",children:[{data:{"what-is-sp8d":{title:"What is SP8D"}}},{name:"what-is-sp8d",route:"/introduction/what-is-sp8d",frontMatter:{title:"What is SP8D? Lock-Free Real-Time Messaging for JavaScript & Node.js",description:"Learn what makes SP8D the best lock-free, high-performance protocol for real-time, observable data transfer in JavaScript and Node.js. Ideal for AI, finance, and multi-agent apps.",keywords:["SP8D","what is SP8D","lock-free protocol","real-time data","browser concurrency","AI messaging","Node.js","SharedArrayBuffer","diagnostics","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/introduction/what-is-sp8d"}}]},{name:"principles",route:"/principles",children:[{data:{"concurrency-models":{title:"Concurrency Models"},"fairness-backpressure":{title:"Fairness Backpressure"}}},{name:"concurrency-models",route:"/principles/concurrency-models",frontMatter:{title:"SP8D Concurrency Models: SPSC, MPSC, MPMC Explained for JavaScript & Node.js",description:"Master SP8D concurrency models—SPSC, MPSC, and MPMC—for high-performance, lock-free communication in JavaScript and Node.js. Compare patterns, use cases, and implementation tips to optimize your multi-threaded apps.",keywords:["SP8D concurrency","SPSC","MPSC","MPMC","concurrency models","lock-free","multi-threading","JavaScript","Node.js","high-performance messaging","parallel programming"],canonical:"https://sp8d.github.io/principles/concurrency-models"}},{name:"fairness-backpressure",route:"/principles/fairness-backpressure",frontMatter:{title:"SP8D Principles: Fairness & Backpressure",description:"Understand fairness and backpressure in SP8D: how the protocol ensures robust, lock-free messaging, prevents starvation, and handles full/empty buffers. Best practices, diagrams, and troubleshooting for JavaScript & Node.js.",keywords:["SP8D fairness","backpressure","lock-free messaging","starvation prevention","buffer full","JavaScript","Node.js","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/principles/fairness-backpressure"}}]},{name:"protocol-internals",route:"/protocol-internals",children:[{data:{"architecture-overview":{title:"Architecture Overview"},"slot-state-machine":{title:"Slot State Machine"},"gen-cycle-byte":{title:"Gen Cycle Byte"}}},{name:"architecture-overview",route:"/protocol-internals/architecture-overview",frontMatter:{title:"SP8D Protocol Internals: Architecture Overview",description:"A high-level, visual, and practical overview of the SP8D protocol architecture, data flow, and slot state machine for implementers and advanced users.",keywords:["SP8D architecture","protocol internals","lock-free messaging","slot state machine","diagnostics","JavaScript","Node.js","high-performance messaging"],canonical:"https://sp8d.github.io/protocol-internals/architecture-overview"}},{name:"gen-cycle-byte",route:"/protocol-internals/gen-cycle-byte",frontMatter:{title:"SP8D Protocol Internals: Gen-Cycle Byte (Placeholder)",description:"Placeholder for Gen-Cycle Byte documentation."}},{name:"slot-state-machine",route:"/protocol-internals/slot-state-machine",frontMatter:{title:"SP8D Protocol Internals: Slot State Machine",description:"Deep dive into the SP8D slot state machine: lifecycle, transitions, fairness, and recovery. Visual diagrams and best practices for implementers and advanced users."}}]},{name:"quickstart",route:"/quickstart",children:[{data:{installation:{title:"Installation"},"minimal-example":{title:"Minimal Example"},"common-recipes":{title:"Common Recipes"}}},{name:"common-recipes",route:"/quickstart/common-recipes",frontMatter:{title:"SP8D Recipes: Integration Patterns for JavaScript & Node.js",description:"Common SP8D integration patterns and recipes for JavaScript and Node.js. Learn browser, Node.js, and AI/ML workflows with code samples and diagrams for high-performance messaging.",keywords:["SP8D recipes","integration patterns","JavaScript","Node.js","AI messaging","browser workers","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/common-recipes"}},{name:"installation",route:"/quickstart/installation",frontMatter:{title:"Install SP8D: Quickstart Guide for JavaScript & Node.js",description:"How to install SP8D for ultra-fast, lock-free cross-thread communication in JavaScript and Node.js. Step-by-step requirements, setup, and troubleshooting for high-performance messaging.",keywords:["SP8D installation","quickstart","JavaScript","Node.js","SharedArrayBuffer","Atomics","setup guide","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/installation"}},{name:"minimal-example",route:"/quickstart/minimal-example",frontMatter:{title:"SP8D Minimal Example: Lock-Free Messaging in JavaScript & Node.js",description:"Minimal working SP8D example for real-time, lock-free messaging in JavaScript and Node.js. Copy-paste code for instant high-performance results.",keywords:["SP8D minimal example","quickstart","JavaScript","Node.js","lock-free messaging","concurrency","high-performance messaging"],canonical:"https://sp8d.github.io/quickstart/minimal-example"}}]}]}},function(e){e.O(0,[7812,2888,9774,179],function(){return e(e.s=6576)}),_N_E=e.O()}]);